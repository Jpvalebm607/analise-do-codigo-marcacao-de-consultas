/**
 * NotificationBell.tsx
 *
 * Componente que exibe um sino de notifica√ß√µes com contagem de mensagens n√£o lidas.
 *
 * Funcionalidades:
 * - Obt√©m o usu√°rio logado atrav√©s do AuthContext.
 * - Consulta a API de notifica√ß√µes via notificationService para obter a contagem de notifica√ß√µes n√£o lidas.
 * - Atualiza a contagem periodicamente a cada 30 segundos e ao retornar para a tela.
 * - Permite navegar para a tela de notifica√ß√µes ao ser pressionado.
 * - Mostra um badge vermelho com a contagem (exibe "99+" se ultrapassar 99).
 *
 * Props principais: Nenhuma, utiliza contexto de autentica√ß√£o e navega√ß√£o.
 */

// Importa React e hooks useState e useEffect
import React, { useState, useEffect } from 'react';

// Importa styled-components para estiliza√ß√£o
import styled from 'styled-components/native';

// Importa TouchableOpacity do React Native para criar bot√£o clic√°vel
import { TouchableOpacity } from 'react-native';

// Importa Badge do react-native-elements para mostrar contagem de notifica√ß√µes
import { Badge } from 'react-native-elements';

// Importa contexto de autentica√ß√£o para obter dados do usu√°rio
import { useAuth } from '../contexts/AuthContext';

// Importa hook de navega√ß√£o para navegar entre telas
import { useNavigation } from '@react-navigation/native';

// Importa servi√ßo de notifica√ß√µes que faz chamadas √† API
import { notificationService } from '../services/notifications';

// Importa tema da aplica√ß√£o (cores, espa√ßamentos etc)
import theme from '../styles/theme';

// Componente funcional NotificationBell
const NotificationBell: React.FC = () => {
  // Obt√©m o usu√°rio logado do contexto
  const { user } = useAuth();

  // Hook de navega√ß√£o para controlar navega√ß√£o entre telas
  const navigation = useNavigation();

  // Estado que guarda o n√∫mero de notifica√ß√µes n√£o lidas
  const [unreadCount, setUnreadCount] = useState(0);

  // Fun√ß√£o que carrega a contagem de notifica√ß√µes n√£o lidas
  const loadUnreadCount = async () => {
    // Se n√£o houver usu√°rio, n√£o faz nada
    if (!user?.id) return;
    
    try {
      // Chama servi√ßo para obter contagem de notifica√ß√µes n√£o lidas
      const count = await notificationService.getUnreadCount(user.id);
      setUnreadCount(count); // Atualiza o estado com a contagem
    } catch (error) {
      console.error('Erro ao carregar contador de notifica√ß√µes:', error);
    }
  };

  // useEffect para carregar contagem ao montar o componente
  useEffect(() => {
    loadUnreadCount();

    // Atualiza contagem a cada 30 segundos
    const interval = setInterval(loadUnreadCount, 30000);

    // Limpa o intervalo ao desmontar componente
    return () => clearInterval(interval);
  }, [user?.id]);

  // useEffect para atualizar contagem sempre que a tela volta ao foco
  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', loadUnreadCount);
    return unsubscribe; // Remove listener ao desmontar
  }, [navigation, user?.id]);

  // Fun√ß√£o chamada ao clicar no sino
  const handlePress = () => {
    navigation.navigate('Notifications' as never); // Navega para tela de notifica√ß√µes
  };

  return (
    // Bot√£o clic√°vel envolvendo o sino
    <TouchableOpacity onPress={handlePress}>
      <BellContainer>
        {/* √çcone do sino */}
        <BellIcon>üîî</BellIcon>

        {/* Badge mostrando contagem de notifica√ß√µes n√£o lidas */}
        {unreadCount > 0 && (
          <Badge
            value={unreadCount > 99 ? '99+' : unreadCount.toString()} // Mostra '99+' se passar de 99
            status="error" // Cor do badge (vermelho)
            containerStyle={styles.badge} // Estilo do container do badge
            textStyle={styles.badgeText} // Estilo do texto dentro do badge
          />
        )}
      </BellContainer>
    </TouchableOpacity>
  );
};

// Estilos JS para Badge
const styles = {
  badge: {
    position: 'absolute' as const, // Posicionamento absoluto sobre o sino
    top: -8, // Dist√¢ncia do topo
    right: -8, // Dist√¢ncia da direita
  },
  badgeText: {
    fontSize: 10, // Tamanho da fonte do n√∫mero
  },
};

// Container do sino
const BellContainer = styled.View`
  position: relative; // Permite posicionar o badge sobre o sino
  padding: 8px; // Espa√ßamento interno
`;

// √çcone do sino (emoji)
const BellIcon = styled.Text`
  font-size: 24px; // Tamanho do √≠cone
  color: ${theme.colors.white}; // Cor branca
`;

// Exporta o componente para uso em outras telas
export default NotificationBell;
